generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id           String        @id @default(cuid())
  name         String
  slug         String        @unique
  size         String?
  industry     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  chatbots     Chatbot[]
  subscription Subscription?
  users        User[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  emailVerified      DateTime?
  name               String?
  password           String?
  role               UserRole  @default(USER)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  tenantId           String?
  image              String?
  onboardingComplete Boolean   @default(false)
  accounts           Account[]
  tenant             Tenant?   @relation(fields: [tenantId], references: [id])

  @@map("users")
}

model Chatbot {
  id              String            @id @default(cuid())
  name            String
  slug            String            @unique
  description     String?
  status          ChatbotStatus     @default(ACTIVE)
  welcomeMessage  String?
  fallbackMessage String?
  avatarUrl       String?
  createdAt       DateTime          @default(now())
  tenantId        String
  updatedAt       DateTime          @default(now()) @updatedAt
  apiKey          String            @unique // API key for public chatbot endpoint
  tenant          Tenant            @relation(fields: [tenantId], references: [id])
  documents       ChatbotDocument[]
  settings        ChatbotSettings?
  conversations   Conversation[]
}

model ChatbotSettings {
  id               String  @id @default(cuid())
  chatbotId        String  @unique
  temperature      Float   @default(0.7)
  systemPrompt     String?
  enableMemory     Boolean @default(false)
  contextLength    Int     @default(6)
  responseLanguage String? @default("en")
  tone             String?
  logConversations Boolean @default(false)
  chatbot          Chatbot @relation(fields: [chatbotId], references: [id])
}

model ChatbotDocument {
  id              String             @id @default(cuid())
  chatbotId       String
  name            String
  sourceType      DocumentSourceType
  sourceUrl       String?
  fileUrl         String?
  contentHash     String
  createdAt       DateTime           @default(now())
  textContent     String?
  mimeType        String?
  size            Int?
  status          DocumentStatus     @default(UPLOADING)
  b2FileId        String?
  b2FileName      String?
  uploadTimestamp BigInt?
  documentId      String?            @unique
  chatbot         Chatbot            @relation(fields: [chatbotId], references: [id])
  document        Document?          @relation(fields: [documentId], references: [id])
}

model Document {
  id              String            @id @default(cuid())
  fileName        String
  fileType        String
  fileSize        Int
  chatbotId       String
  status          DocumentStatusRAG @default(UPLOADED)
  rawContent      String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  chatbotDocument ChatbotDocument?
  chunks          DocumentChunk[]

  @@index([chatbotId])
}

model DocumentChunk {
  id         String   @id @default(cuid())
  documentId String
  content    String
  chunkIndex Int
  tokenCount Int?
  metadata   Json?
  createdAt  DateTime @default(now())
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String?
  chatbotId String
  title     String?
  createdAt DateTime  @default(now())
  chatbot   Chatbot   @relation(fields: [chatbotId], references: [id])
  messages  Message[]
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Subscription {
  id               String    @id @default(cuid())
  tenantId         String    @unique
  planId           String
  stripeCustomerId String?
  stripeSubId      String?
  currentPeriodEnd DateTime?
  createdAt        DateTime  @default(now())
  plan             Plan      @relation(fields: [planId], references: [id])
  tenant           Tenant    @relation(fields: [tenantId], references: [id])
}

model Plan {
  id            String         @id @default(cuid())
  name          String
  price         Int
  monthly       Boolean        @default(true)
  maxChats      Int
  maxFiles      Int
  subscriptions Subscription[]
}

enum UserRole {
  ADMIN
  USER
}

enum ChatbotStatus {
  ACTIVE
  INACTIVE
}

enum DocumentStatusRAG {
  UPLOADED
  PROCESSING
  PROCESSED
  CHUNKED
  EMBEDDED
  FAILED
}

enum DocumentStatus {
  UPLOADING
  READY
  FAILED
}

enum DocumentSourceType {
  FILE
  URL
  MANUAL
}

enum MessageRole {
  USER
  ASSISTANT
}
